Recursion:
class Solution {
private:
    int count(int m, int n){
        if(m==0 && n==0)return 1;
        if(m<0 || n<0)return 0;
        return count(m-1,n)+count(m,n-1);
    }
public:
    int uniquePaths(int m, int n) {
        return count(m-1,n-1);
    }
};
Time Complexity: O(2^m*n)
Space Complexity: O(path length) = O(m+n-2)

Memoization:
class Solution {
private:
    int count(int m, int n, vector<vector<int>>& dp){
        if(m==0 && n==0)return dp[m][n]=1;
        if(m<0 || n<0)return 0;
        return dp[m][n]=count(m-1,n,dp)+count(m,n-1,dp);
    }
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m, vector<int>(n,-1));
        return count(m-1,n-1,dp);
    }
};
Time Complexity: O(m*n)
Space Complexity: O(path length)+O(m*n) = O(m+n-2)+O(m*n)

Tabulation:
class Solution {
private:
    int count(int m, int n){
        vector<vector<int>> dp(m+1, vector<int>(n+1,0));
        dp[0][0] = 1;
        for(int i = 0; i<=m; i++){
            for(int j = 0; j<=n; j++){
                if(i==0 && j== 0)continue;
                dp[i][j] = (i-1>=0?dp[i-1][j]:0)+(j-1>=0?dp[i][j-1]:0);
            }
        }return dp[m][n];
    }
public:
    int uniquePaths(int m, int n) {
        return count(m-1,n-1);
    }
};
Time Complexity: O(m*n)
Space Complexity: O(m*n)

Space Optimization:
class Solution {
private:
    int count(int m, int n){
        vector<int> prev(n+1,0);
        prev[0] = 1;
        for(int i = 0; i<=m; i++){
            vector<int> curr(n+1,0);
            for(int j = 0; j<=n; j++){
                if(i==0 && j==0)curr[0]=1;
                else curr[j] = (i-1>=0?prev[j]:0)+(j-1>=0?curr[j-1]:0);
            }prev = curr;
        }return prev[n];
    }
public:
    int uniquePaths(int m, int n) {
        return count(m-1, n-1);
    }
};

Time Complexity: O(m*n)
Space Complexity: O(n)
