Recursion:
class Solution{
    private:
    int cnt(int W, int wt[], int val[], int n){
        if(n<0 || W<=0)return 0;
        if(n==0){
            if(wt[0]<=W)return val[0];
            else return 0;
        }int pick = 0;
        if(W-wt[n]>=0)pick = val[n]+cnt(W-wt[n], wt, val, n-1);
        return max(pick , cnt(W, wt, val, n-1));
    }
    public:
    int knapSack(int W, int wt[], int val[], int n) { 
       return cnt(W, wt, val, n-1);
    }
};

Memoization:
class Solution{
    private:
    int cnt(int W, int wt[], int val[], int n, vector<vector<int>>& dp){
        if(n<0 || W<=0)return 0;
        if(dp[n][W]!=-1)return dp[n][W];
        if(n==0){
            if(wt[0]<=W)return val[0];
            else return 0;
        }int pick = 0;
        if(W-wt[n]>=0)pick = val[n]+cnt(W-wt[n], wt, val, n-1, dp);
        return dp[n][W] = max(pick , cnt(W, wt, val, n-1, dp));
    }
    public:
    int knapSack(int W, int wt[], int val[], int n) { 
       vector<vector<int>> dp(n+1, vector<int>(W+1, -1));
       return cnt(W, wt, val, n-1, dp);
    }
};

Tabulation:
class Solution{
    private:
    int cnt(int W, int wt[], int val[], int n){
        if(n<0 || W<=0)return 0;
        vector<vector<int>> dp(n+1, vector<int>(W+1, 0));
        for(int j = wt[0]; j<=W; j++){
            dp[0][j] = val[0];
        }for(int i = 1; i<=n; i++){
            for(int j = 0; j<=W; j++){
                int pick = 0;
                if(j-wt[i]>=0)pick = val[i]+dp[i-1][j-wt[i]];
                dp[i][j] = max(pick , dp[i-1][j]);
            }
        }return dp[n][W];
    }
    public:
    int knapSack(int W, int wt[], int val[], int n) { 
       return cnt(W, wt, val, n-1);
    }
};

Space Optimization:
class Solution{
    private:
    int cnt(int W, int wt[], int val[], int n){
        if(n<0 || W<=0)return 0;
        vector<int> prev(W+1, 0);
        for(int j = wt[0]; j<=W; j++){
            prev[j] = val[0];
        }for(int i = 1; i<=n; i++){
            vector<int> curr(W+1, 0);
            for(int j = 0; j<=W; j++){
                int pick = 0;
                if(j-wt[i]>=0)pick = val[i]+prev[j-wt[i]];
                curr[j] = max(pick , prev[j]);
            }prev = curr;
        }return prev[W];
    }
    public:
    int knapSack(int W, int wt[], int val[], int n) { 
       return cnt(W, wt, val, n-1);
    }
};

Further Space Optimization:
class Solution{
    private:
    int cnt(int W, int wt[], int val[], int n){
        if(n<0 || W<=0)return 0;
        vector<int> prev(W+1, 0);
        for(int j = wt[0]; j<=W; j++){
            prev[j] = val[0];
        }for(int i = 1; i<=n; i++){
            for(int j = W; j>=0; j--){
                int pick = 0;
                if(j-wt[i]>=0)pick = val[i]+prev[j-wt[i]];
                prev[j] = max(pick , prev[j]);
            }
        }return prev[W];
    }
    public:
    int knapSack(int W, int wt[], int val[], int n) { 
       return cnt(W, wt, val, n-1);
    }
};
