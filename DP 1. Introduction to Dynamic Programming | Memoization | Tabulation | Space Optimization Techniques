"Those who cannot remember the past are condemned to repeat it."

Tabulation: Bottom-Up Approach
Memoization: Top-Down Approach

1. Fibonaaci Number

int fibo(int n){
    if(n<=1)return n;
    return fibo(n-1)+fibo(n-2);
}
int main(){
    int n;
    cin>>n;
    cout<<fibo(n)<<endl;
    return 0;
}

Memoization: tend to store value of sub probelms in maps/arrays

#include <bits/stdc++.h>
using namespace std;

int fibo_memoized(int n, vector<int>& dp){
    if(dp[n]!=-1)return dp[n];
    if(n<=1)return dp[n] = n;
    return dp[n] = fibo(n-1,dp)+fibo(n-2,dp);
}

int main(){
    int n;
    cin>>n;
    vector<int> dp(n+1,-1);
    cout<<fibo_memoized(n, dp)<<endl;
    return 0;
}
Time Complexity: O(n)
Space Complexity: O(n)+O(n)

Tabulation:
#include <bits/stdc++.h>
using namespace std;

int fibo_tabulation(int n){
    vector<int> dp(n+1,-1);
    dp[0] = 0;
    dp[1] = 1;
    if(n<=1)return dp[n] = n;
    for(int i = 2; i<=n; i++){
        dp[i] = dp[i-1]+dp[i-2];
    }return dp[n];
}

int main(){
    int n;
    cin>>n;
    cout<<fibo_tabulation(n)<<endl;
    return 0;
}
Time Complexity: O(n)
Space Complexity: O(n)

Optimized:
#include <bits/stdc++.h>
using namespace std;

int fibo_optimized(int n){
    if(n<=1)return n;
    int prev2 = 0, prev = 1;
    for(int i = 2; i<=n; i++){
        int curr = prev2+prev;
        prev2 = prev;
        prev = curr;
    }return prev;
}

int main(){
    int n;
    cin>>n;
    cout<<fibo_optimized(n)<<endl;
}
Time Complexity: O(n)
Space Complexity: O(1)
