Reecursion:
class Solution {
private:
    int sum(vector<vector<int>>& grid, int m, int n){
        if(m<0 || n<0)return INT_MAX/2;
        if(m==0 && n==0)return grid[0][0];
        int up = grid[m][n]+sum(grid, m-1, n);
        int left = grid[m][n]+sum(grid,m,n-1);
        return min(up,left);
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return sum(grid,m-1,n-1);
    }
};
Time Complexity: O(2^m*n)
Space Complexity: O(m+n-2)

Memoization:
class Solution {
private:
    int sum(vector<vector<int>>& grid, int m, int n,vector<vector<int>>&dp){
        if(m<0 || n<0)return INT_MAX/2;
        if(dp[m][n]!=-1)return dp[m][n];
        if(m==0 && n==0)return dp[m][n]= grid[0][0];
        int up = grid[m][n]+sum(grid, m-1, n,dp);
        int left = grid[m][n]+sum(grid,m,n-1,dp);
        return dp[m][n]=min(up,left);
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m, vector<int>(n,-1));
        return sum(grid,m-1,n-1,dp);
    }
};
Time COmplexity: O(m*n)
Space Complexity: O(m+n-2)+O(m*n)

Tabulation:
class Solution {
private:
    int sum(vector<vector<int>>& grid, int m, int n){
        vector<vector<int>>dp(m+1, vector<int>(n+1,-1));
        dp[0][0]= grid[0][0];
        for(int i = 0; i<=m; i++){
            for(int j = 0; j<=n; j++){
                if(i==0 && j== 0)continue;
                int up = grid[i][j] + (i-1>=0?dp[i-1][j]:INT_MAX/2);
                int left = grid[i][j] + (j-1>=0?dp[i][j-1]:INT_MAX/2);
                dp[i][j] = min(up,left);
            }
        }return dp[m][n];
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return sum(grid,m-1,n-1);
    }
};
Time COmplexity: O(m*n)
Space Complexity: O(m*n)

Space Optimization:
class Solution {
private:
    int sum(vector<vector<int>>& grid, int m, int n){
        vector<int> prev(n+1,0);
        prev[0] = grid[0][0];
        for(int i = 0; i<=m; i++){
            vector<int> curr(n+1,0);
            for(int j = 0; j<=n; j++){
                if(i==0 && j== 0){
                    curr[0] = grid[0][0];
                    continue;
                }int up = grid[i][j] + (i-1>=0?prev[j]:INT_MAX/2);
                int left = grid[i][j] + (j-1>=0?curr[j-1]:INT_MAX/2);
                curr[j] = min(up,left);
            }prev=curr;
        }return prev[n];
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return sum(grid,m-1,n-1);
    }
};
Time COmplexity: O(m*n)
Space Complexity: O(n)
