Recursion:
#include <bits/stdc++.h> 
using namespace std;

int count(int r, int c, vector<vector<int>> &grid, int i, int j1, int j2){
    if(i <0 || j1<0 || j2<0)return -1e8;
    if(i >= r || j1>=c || j2>=c)return -1e8;
    if(i==r-1){
        if(j1!=j2)return grid[i][j1]+grid[i][j2];
        else return grid[i][j1];
    }int ans = INT_MIN;
    for(int ptr1 = -1; ptr1<=1; ptr1++){
        for(int ptr2 = -1; ptr2<=1; ptr2++){
            int temp = (j1!=j2?grid[i][j1]+grid[i][j2]:grid[i][j2]);
            ans = max(ans,temp +count(r,c,grid,i+1, ptr1+j1, ptr2+j2));
        }
    }return ans;
}
int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    return count(r,c,grid,0,0,c-1);
}
Time Complexity: O(3^n * 3^n)
Space Complexity: O(n)

Memoization:
#include <bits/stdc++.h> 
using namespace std;

int count(int r, int c, vector<vector<int>> &grid, int i, int j1, int j2, vector<vector<vector<int>>>& dp){
    if(i <0 || j1<0 || j2<0)return -1e8;
    if(i >= r || j1>=c || j2>=c)return -1e8;
    if(dp[i][j1][j2]!=-1)return dp[i][j1][j2];
    if(i==r-1){
        if(j1!=j2)return dp[i][j1][j2]= grid[i][j1]+grid[i][j2];
        else return dp[i][j1][j2]= grid[i][j1];
    }int ans = INT_MIN;
    for(int ptr1 = -1; ptr1<=1; ptr1++){
        for(int ptr2 = -1; ptr2<=1; ptr2++){
            int temp = (j1!=j2?grid[i][j1]+grid[i][j2]:grid[i][j2]);
            ans = max(ans,temp +count(r,c,grid,i+1, ptr1+j1, ptr2+j2,dp));
        }
    }return dp[i][j1][j2]=ans;
}
int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    vector<vector<vector<int>>> dp(r, vector<vector<int>>(c, vector<int>(c, -1)));
    return count(r,c,grid,0,0,c-1,dp);
}
Time Complexity:O(N*M*M)*9
Space Complexity:O(N)+O(N*N*N)

Tabulation:
#include <bits/stdc++.h> 
int maximumChocolates(int n, int m, vector < vector < int >> & grid) {
  vector < vector < vector < int >>> dp(n, vector < vector < int >> (m, 
  vector < int > (m, 0)));

  for (int j1 = 0; j1 < m; j1++) {
    for (int j2 = 0; j2 < m; j2++) {
      if (j1 == j2)dp[n - 1][j1][j2] = grid[n - 1][j1];
      else dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
    } 
  }
  for (int i = n - 2; i >= 0; i--) {
    for (int j1 = 0; j1 < m; j1++) {
      for (int j2 = 0; j2 < m; j2++) {
        int maxi = INT_MIN;
        for (int di = -1; di <= 1; di++) {
          for (int dj = -1; dj <= 1; dj++) {
            int ans;
            if (j1 == j2)ans = grid[i][j1];
            else ans = grid[i][j1] + grid[i][j2];
            if ((j1 + di < 0 || j1 + di >= m) ||
              (j2 + dj < 0 || j2 + dj >= m))
              ans += -1e9;
            else
              ans += dp[i + 1][j1 + di][j2 + dj];

            maxi = max(ans, maxi);
          }
        }
        dp[i][j1][j2] = maxi;
      }
    }
  }return dp[0][0][m - 1];
}

Space Optimization:
#include <bits/stdc++.h> 
int maximumChocolates(int n, int m, vector < vector < int >> & grid) {
  vector < vector < int >> front(m, vector < int > (m, 0)), cur(m, vector < int > 
  (m, 0));
  for (int j1 = 0; j1 < m; j1++) {
    for (int j2 = 0; j2 < m; j2++) {
      if (j1 == j2)front[j1][j2] = grid[n - 1][j1];
      else front[j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
    }
  }for (int i = n - 2; i >= 0; i--) {
    for (int j1 = 0; j1 < m; j1++) {
      for (int j2 = 0; j2 < m; j2++) {

        int maxi = INT_MIN;
        for (int di = -1; di <= 1; di++) {
          for (int dj = -1; dj <= 1; dj++) {
            int ans;
            if (j1 == j2)ans = grid[i][j1];
            else ans = grid[i][j1] + grid[i][j2];

            if ((j1 + di < 0 || j1 + di >= m) ||
              (j2 + dj < 0 || j2 + dj >= m))

              ans += -1e9;
            else
              ans += front[j1 + di][j2 + dj];

            maxi = max(ans, maxi);

          }
        }cur[j1][j2] = maxi;
      }
    }front = cur;
  }return front[0][m - 1];
}
