Recursion:
class Solution {
  private:
    int cnt(int n, vector<int> arr, int sum){
        if(n<0 || sum <0)return 0;
        if(n==0){
            if(sum==0 && arr[0]==0)return 2;
            if(arr[0]==sum)return 1;
            if(sum==0)return 1;
            return 0;
        }return cnt(n-1,arr,sum)+cnt(n-1,arr,sum-arr[n]);
    }
  public:
    int countPartitions(int n, int d, vector<int>& arr) {
        int sum = 0;
        for(int i = 0; i<n; i++){
            sum = sum+arr[i];
        }if((sum+d)%2!=0)return 0;
        int temp = sum+d;
        temp = temp/2;
        return cnt(n-1, arr, temp);
        
    }
};

Memoization:
class Solution {
  private:
    int cnt(int n, vector<int> arr, int sum, vector<vector<int>>& dp){
        if(n<0 || sum <0)return 0;
        if(dp[n][sum]!=-1)return dp[n][sum];
        if(n==0){
            if(sum==0 && arr[0]==0)return dp[n][sum] = 2;
            if(arr[0]==sum)return dp[n][sum] = 1;
            if(sum==0)return dp[n][sum] = 1;
            return 0;
        }return dp[n][sum] = (cnt(n-1,arr,sum,dp)+cnt(n-1,arr,sum-arr[n],dp))%1000000007;
    }
  public:
    int countPartitions(int n, int d, vector<int>& arr) {
        int sum = 0;
        for(int i = 0; i<n; i++){
            sum = sum+arr[i];
        }if((sum+d)%2!=0)return 0;
        if(d>sum)return 0;
        int temp = sum+d;
        temp = temp/2;
        vector<vector<int>>dp(n+1, vector<int>(sum+1,-1));
        return cnt(n-1, arr, temp, dp);
        
    }
};

Tabulation:
class Solution {
  private:
    int cnt(int n, vector<int> arr, int sum){
        if(n<0 || sum <0)return 0;
        vector<vector<int>>dp(n+1, vector<int>(sum+1,0));
        dp[0][arr[0]] = 1;
        if(arr[0]==0)dp[0][0] = 2;
        else dp[0][0] = 1;
        
        for(int i = 1; i<=n; i++){
            for(int j = 0; j<=sum; j++){
                // if(i==0 && (j==0 || j==arr[0]))continue;
                dp[i][j] = ((i-1>=0?dp[i-1][j]:0)+((i-1>=0&&j-arr[i]>=0)?dp[i-1][j-arr[i]]:0))%1000000007;
            }
        }return dp[n][sum];
    }
  public:
    int countPartitions(int n, int d, vector<int>& arr) {
        int sum = 0;
        for(int i = 0; i<n; i++){
            sum = sum+arr[i];
        }if((sum+d)%2!=0)return 0;
        if(d>sum)return 0;
        int temp = sum+d;
        temp = temp/2;
        return cnt(n-1, arr, temp);
        
    }
};

Space Optimization:
class Solution {
  private:
    int cnt(int n, vector<int> arr, int sum){
        if(n<0 || sum <0)return 0;
        vector<int>prev(sum+1,0);
        prev[arr[0]] = 1;
        if(arr[0]==0)prev[0] = 2;
        else prev[0] = 1;
        for(int i = 1; i<=n; i++){
            vector<int>curr(sum+1,0);
            for(int j = 0; j<=sum; j++){
                curr[j] = (prev[j]+(j-arr[i]>=0?prev[j-arr[i]]:0))%1000000007;
            }prev = curr;
        }return prev[sum];
    }
  public:
    int countPartitions(int n, int d, vector<int>& arr) {
        int sum = 0;
        for(int i = 0; i<n; i++){
            sum = sum+arr[i];
        }if((sum+d)%2!=0)return 0;
        if(d>sum)return 0;
        int temp = sum+d;
        temp = temp/2;
        return cnt(n-1, arr, temp);
        
    }
};
