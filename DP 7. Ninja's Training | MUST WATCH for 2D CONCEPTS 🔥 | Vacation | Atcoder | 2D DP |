Recursion:
int pt(int n, vector<vector<int>> &points, int lastTask){
    if(n==0){
        int point = 0;
        for(int task = 0; task<=2; task++){
            if(task!=lastTask)point = max(point, points[0][task]);
        }return point;
    }int point = 0;
    for(int task = 0; task<=2; task++){
        if(task!=lastTask){
            point = max(point, points[n][task]+pt(n-1,points,task));
        }
    }return point;
}

int ninjaTraining(int n, vector<vector<int>> &points){
    return pt(n-1,points, 3);
}


Memoization:
int pt(int n, vector<vector<int>> &points, int lastTask,vector<vector<int>>&dp){
    if(dp[n][lastTask]!=-1)return dp[n][lastTask];
    if(n==0){
        int point = 0;
        for(int task = 0; task<=2; task++){
            if(task!=lastTask)point = max(point, points[0][task]);
        }return dp[0][lastTask]=point;
    }int point = 0;
    for(int task = 0; task<=2; task++){
        if(task!=lastTask){
            point = max(point, points[n][task]+pt(n-1,points,task,dp));
        }
    }return dp[n][lastTask]=point;
}

int ninjaTraining(int n, vector<vector<int>> &points){
    vector<vector<int>>dp(n, vector<int>(4,-1));
    return pt(n-1,points, 3,dp);
}

Time Complexity: O(N*4*3)
Reason: There are N*4 states and for every state, we are running a for loop iterating three times.

Space Complexity: O(N) + O(N*4)
Reason: We are using a recursion stack space(O(N)) and a 2D array (again O(N*4)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)

Tabulation:
int ninjaTraining(int n, vector<vector<int>> &points){
    vector<vector<int>>dp(n, vector<int>(4,0));
    dp[0][0] = max(points[0][1],points[0][2]);
    dp[0][1] = max(points[0][0],points[0][2]);
    dp[0][2] = max(points[0][1],points[0][0]);
    dp[0][3] = max(points[0][0],max(points[0][1],points[0][2]));
    for(int i = 1; i<n; i++){
        for(int lastTask = 0; lastTask<=3; lastTask++){
            for(int task = 0; task<=2; task++){
                if(task!=lastTask){
                    dp[i][lastTask] = max(dp[i][lastTask], points[i][task]+dp[i-1][task]);
                }
            }
        }
    }return dp[n-1][3];
}
Time Complexity: O(N*4*3)
Reason: There are three nested loops

Space Complexity: O(N*4)
Reason: We are using an external array of size ‘N*4’’.

Space Optimization:
int ninjaTraining(int n, vector<vector<int>> &points){
    vector<int>prev(4,0);
    prev[0] = max(points[0][1],points[0][2]);
    prev[1] = max(points[0][0],points[0][2]);
    prev[2] = max(points[0][1],points[0][0]);
    prev[3] = max(points[0][0],max(points[0][1],points[0][2]));
    for(int i = 1; i<n; i++){
        vector<int> curr(4,0);
        for(int lastTask = 0; lastTask<=3; lastTask++){
            for(int task = 0; task<=2; task++){
                if(task!=lastTask){
                    curr[lastTask] = max(curr[lastTask], points[i][task]+prev[task]);
                }
            }
        }prev = curr;
    }return prev[3];
}
Time Complexity: O(N*4*3)
Reason: There are three nested loops

Space Complexity: O(4)
Reason: We are using an external array of size ‘4’ to store only one row.
