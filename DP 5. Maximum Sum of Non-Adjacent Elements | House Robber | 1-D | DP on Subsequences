Recursion:
class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    if(n==0)return arr[0];
	    if(n<=0)return 0;
	    int pick = findMaxSum(arr,n-2)+arr[n-1];
	    int nonPick = findMaxSum(arr,n-1)+0;
	    return max(pick, nonPick);
	}
};
Time Complexity: O(2^n)
Space Complexity: O(n)

Memoization:
class Solution{
private:
    int help(int *arr, int n, vector<int>& dp){
        if(dp[n]!=-1)return dp[n];
        if(n==0)return dp[0] = arr[0];
	    if(n<0)return 0;
	    int pick = help(arr,n-2,dp)+arr[n];
	    int nonPick = help(arr,n-1,dp)+0;
	    return dp[n] = max(pick, nonPick);
    }
public:	
	int findMaxSum(int *arr, int n) {
	    vector<int> dp(n,-1);
	    return help(arr,n-1,dp);
	}
};
TIme Complexity: O(n)
Space Complexity: O(n)+O(n)

Tabulation:
class Solution{
private:
    int help(int *arr, int n){
        vector<int> dp(n+1,-1);
        dp[0] = arr[0];
        if(n<0)return 0;
        if(dp[n]!=-1)return dp[n];
	    for(int i = 1; i<=n; i++){
	        dp[i] = max(arr[i] + (i == 1 ? 0 : dp[i - 2]), 0 + dp[i - 1]);
	    }return dp[n];
    }
public:	
	int findMaxSum(int *arr, int n) {
	    return help(arr,n-1);
	}
};
TIme Complexity: O(n)
Space Complexity: O(n)

Space Optimization:
class Solution{
private:
    int help(int *arr, int n){
        if(n==0)return arr[0];
        if(n<0)return 0;
        int prev2 = 0;
        int prev1 = arr[0];
	    for(int i = 1; i<=n; i++){
	       int curr = max(arr[i]+prev2, 0+prev1);
	       prev2 = prev1;
	       prev1 = curr;
	    }return prev1;
    }
public:	
	int findMaxSum(int *arr, int n) {
	    return help(arr,n-1);
	}
};
TIme Complexity: O(n)
Space Complexity: O(1)

