Recursion:
class Solution {
private:
    int count(vector<vector<int>>& matrix, int r, int c){
        int n = matrix.size();
        if(r<0 || c<0 || c>=n)return INT_MAX/10;
        if(r==0)return matrix[r][c];
        int path1 = matrix[r][c] + count(matrix, r-1,c-1);
        int path2 = matrix[r][c] + count(matrix, r-1,c);
        int path3 = matrix[r][c] + count(matrix, r-1,c+1);
        return min(path1, min(path2, path3));
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int ans = INT_MAX;
        for(int i = 0; i<n; i++){
            ans = min(ans, count(matrix, n-1, i));
        }return ans;
    }
};

Memoization:
class Solution {
private:
    int count(vector<vector<int>>& matrix, int r, int c,vector<vector<int>>&dp){
        int n = matrix.size();
        if(r<0 || c<0 || c>=n)return INT_MAX/10;
        if(dp[r][c]!=-1)return dp[r][c];
        if(r==0)return dp[r][c] =  matrix[r][c];
        int path1 = matrix[r][c] + count(matrix, r-1,c-1,dp);
        int path2 = matrix[r][c] + count(matrix, r-1,c,dp);
        int path3 = matrix[r][c] + count(matrix, r-1,c+1,dp);
        return dp[r][c] = min(path1, min(path2, path3));
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        vector<vector<int>>dp(matrix.size(), vector<int> (matrix.size(),-1));
        int n = matrix.size();
        int ans = INT_MAX;
        for(int i = 0; i<n; i++){
            ans = min(ans, count(matrix, n-1, i, dp));
        }return ans;
    }
};

Tabulation:
class Solution {      
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>>dp(matrix.size(), vector<int> (matrix.size(),-1));
        for(int i = 0; i<n; i++){
            dp[0][i] = matrix[0][i];
        }for(int i = 1; i<n; i++){
            for(int j = 0; j<n; j++){
                int leftDiag = matrix[i][j] + (j-1>=0?dp[i-1][j-1]:INT_MAX/10);
                int up = matrix[i][j] + dp[i-1][j];
                int rightDiag = matrix[i][j] + (j+1<n?dp[i-1][j+1]:INT_MAX/10);
                dp[i][j] = min(leftDiag, min(up, rightDiag));
            }
        }int ans = dp[n-1][0];
        for(int i = 1; i<n; i++){
            ans = min(ans, dp[n-1][i]);
        }return ans;
    }
};

Space Optimization:
class Solution {      
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<int>prev(matrix.size(), 0);
        for(int i = 0; i<n; i++){
            prev[i] = matrix[0][i];
        }for(int i = 1; i<n; i++){
            vector<int>curr(matrix.size(), 0);
            for(int j = 0; j<n; j++){
                int leftDiag = matrix[i][j] + (j-1>=0?prev[j-1]:INT_MAX/10);
                int up = matrix[i][j] + prev[j];
                int rightDiag = matrix[i][j] + (j+1<n?prev[j+1]:INT_MAX/10);
                curr[j] = min(leftDiag, min(up, rightDiag));
            }prev = curr;
        }int ans = prev[0];
        for(int i = 1; i<n; i++){
            ans = min(ans, prev[i]);
        }return ans;
    }
};
