Recursion:
class Solution{
    private:
    int cnt(int arr[], int n, int sum){
        if(n<0 || sum <0)return 0;
        if(n==0){
            if(arr[0]==0 && sum==0)return 2;
            if(arr[0]==sum)return 1;
            if(sum==0)return 1;
            return 0;
        }return cnt(arr, n-1, sum)+cnt(arr, n-1, sum-arr[n]);
    }

	public:
	int perfectSum(int arr[], int n, int sum){
        return cnt(arr, n-1, sum);
	}
};
Time Complexity: O(2^n)
Space Complexity: O(n)

Memoization:
class Solution{
    private:
    int cnt(int arr[], int n, int sum, vector<vector<int>>& dp){
        if(n<0 || sum <0)return 0;
        if(dp[n][sum]!=-1)return dp[n][sum];
        if(n==0){
            if(arr[0]==0 && sum==0)return dp[n][sum]= 2;
            if(arr[0]==sum)return dp[n][sum]= 1;
            if(sum==0)return dp[n][sum] =  1;
            return 0;
        }return dp[n][sum] = (cnt(arr, n-1, sum, dp)+cnt(arr, n-1, sum-arr[n], dp))%1000000007;
    }

	public:
	int perfectSum(int arr[], int n, int sum){
	    vector<vector<int>> dp(n+1, vector<int> (sum+1, -1));
        return cnt(arr, n-1, sum, dp);
	}
};
Time Complexity: O(n)
Space Complexity: O(n)+O(n+1*sum+1)

Tabulation:
class Solution{
    private:
    int cnt(int arr[], int n, int sum){
        if(n<0 || sum <0)return 0;
        vector<vector<int>> dp(n+1, vector<int> (sum+1, 0));
        dp[0][arr[0]] = 1;
        if(arr[0]==0)dp[0][0] = 2;
        else dp[0][0] = 1;
        for(int i = 0; i<=n; i++){
            for(int j = 0; j<=sum; j++){
                if(i==0 && (j==0 || j==arr[0]))continue;
                dp[i][j] = ((i-1>=0?dp[i-1][j]:0)+((i-1>=0&&j-arr[i]>=0)?dp[i-1][j-arr[i]]:0))%1000000007;
            }
        }return dp[n][sum];
    }

	public:
	int perfectSum(int arr[], int n, int sum){
        return cnt(arr, n-1, sum);
	}
};
Time Complexity: O(n)
Space Complexity: O(n+1*sum+1)

Space Optimization:
class Solution{
    private:
    int cnt(int arr[], int n, int sum){
        if(n<0 || sum <0)return 0;
        vector<int> prev(sum+1, 0);
        prev[arr[0]] = 1;
        if(arr[0]==0)prev[0] = 2;
        else prev[0] = 1;
        for(int i = 1; i<=n; i++){
            vector<int> curr(sum+1, 0);
            for(int j = 0; j<=sum; j++){
                curr[j] = ((i-1>=0?prev[j]:0)+((i-1>=0&&j-arr[i]>=0)?prev[j-arr[i]]:0))%1000000007;
            }prev = curr;
        }return prev[sum];
    }

	public:
	int perfectSum(int arr[], int n, int sum){
        return cnt(arr, n-1, sum);
	}
Time Complexity: O(n)
Space Complexity: O(sum+1)
